'use strict';

const { foldPantsFolders } = require('pantspack-folder-runner');
const console = require('node:console');
const path = require('node:path');
const util = require('node:util');

/**
 * @import {PackageDescriptor} from '../../../../src/types.js'
 */

/**
 *
 * @param {string} from
 * @returns {{packageDescriptor: PackageDescriptor, packageLocation: string}}
 */
const findPackageDescriptor = from => {
  const current = from;
  for (;;) {
    const packageJsonPath = path.join(current, 'package.json');
    try {
      const packageDescriptor = require(packageJsonPath);
      return {
        packageDescriptor,
        packageLocation: path.dirname(packageJsonPath),
      };
    } catch {
      const parent = path.resolve(current, '..');
      if (parent === current) {
        throw Error(`Could not find package.json from ${from}`);
      }
    }
  }
};

const main = () => {
  const {
    values: { config: configFile },
    positionals,
  } = util.parseArgs({
    options: {
      config: {
        type: 'string',
        default: path.join(
          __dirname,
          '..',
          'webpackish-app',
          'pantspack.config.js',
        ),
      },
    },
    allowPositionals: true,
  });

  // read config file

  const configSpecifier = path.resolve(configFile);

  let configResolved;
  try {
    configResolved = require.resolve(configSpecifier);
  } catch (err) {
    console.error(err);
    console.error(`Could not resolve config file: ${configSpecifier}`);
    process.exitCode = 1;
    return;
  }

  /** @type {{entry: string, folders: string[]}} */
  let config;
  try {
    config = require(configResolved);
  } catch (err) {
    console.error(err);
    console.error(`Error loading config file: ${configResolved}`);
    process.exitCode = 1;
    return;
  }

  const { folders } = config;

  if (!folders.length) {
    console.error(
      `No folders specified in config file: ${configResolved}. Please specify at least one folder.`,
    );
    process.exitCode = 1;
    return;
  }

  // find package descriptor for config
  const { packageDescriptor } = findPackageDescriptor(
    path.dirname(configResolved),
  );

  const configDir = path.dirname(configResolved);
  const sources = [
    path.resolve(configDir, config.entry),
    ...positionals.map(source => path.resolve(configDir, source)),
  ];

  const pantsHeap = [
    {
      packageDescriptor,
      sources,
    },
  ];

  const foldedPantsHeap = foldPantsFolders(
    pantsHeap,
    /** @type {[string, ...string[]]} */ (folders),
  );

  for (const { foldedSources } of foldedPantsHeap) {
    for (const foldedSource of foldedSources) {
      console.log(foldedSource);
    }
  }

  debugger
  return foldedPantsHeap;
};

module.exports = main();
